<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
	 http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd 
	 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
	 http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd 
	 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	
	<!-- 读取properties文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:common.properties</value>
				<value>classpath*:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 注解搜索路径 -->
	<context:component-scan base-package="com.boomhope"/>
	<!-- spring注解 -->
	
	<bean id="springAnnotations" class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
	
	<!-- 数据库连接池c3p0配置，不同工程id最好起不一样 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${c3p0.driverClass}"></property>
		<property name="jdbcUrl" value="${c3p0.url}"></property>
		<property name="user" value="${c3p0.user}"></property>
		<property name="password" value="${c3p0.password}"></property>
		<property name="minPoolSize" value="${c3p0.minPoolSize}"></property> <!-- 连接池中保留的最小连接数 -->
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property> <!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property> <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property> <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"></property> <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="maxStatements" value="${c3p0.maxStatements}"></property> <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池，所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default：0 -->
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property><!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default:3 -->
		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"></property> <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="testConnectionOnCheckin" value="${c3p0.testConnectionOnCheckin}"></property> <!-- true表示每次把连接checkin到pool里的时候测试其有效性。因为是个事后操作，所以是异步的，应用端不需要等待测试结果，但同样会造成至少多一倍的数据库调用。 -->
		<property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}"></property> <!-- 因性能消耗大，请只在需要的时候使用它。Default: false 如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。 -->
		<property name="checkoutTimeout" value="${c3p0.checkoutTimeout}"></property> <!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒。Default:0 -->
		<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}"></property> <!-- Default:false 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。 -->
	</bean>
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/boomhope/mapper/*.xml"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.boomhope.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	<!-- 定时获取摄像机的状态，并返回给监控模板进行新增状态 -->
	<bean name="CleanVipLogJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="com.boomhope.job.CleanVipLogJob"/>
		<property name="jobDataAsMap">
			<map>
				<entry key="timeout" value="0"/>
			</map>
		</property>
	</bean>
	
	<!-- 配置作业调度的触发方式（触发器）按照一定频率定时调用 --><!-- 调度工厂实例化后，经过0秒开始执行调度 --><!-- 每20秒调度一次 -->
	<bean id="CleanVipLogTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="CleanVipLogJob"/>
		<property name="startDelay" value="0"/>
		<property name="repeatInterval" value="20000"/>
	</bean>
	
	<!-- 新增配置：定时任务的factorybean,配置其他config:这时候，我们在定义类继承job的时候，就可以使用autowired注入service对象了--> 
	<bean id="jobFactory" class="com.boomhope.job.JobFactory"></bean>
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobFactory" ref="jobFactory"></property>
		<property name="triggers">
			<list>
				<ref bean="CleanVipLogTrigger"/>
			</list>
		</property>
	</bean>
	
</beans>